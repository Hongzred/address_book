{"version":3,"sources":["logo.svg","AddressBook/AddressBook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddressBook","props","address","map","item","ListGroup","Item","key","Card","className","onClick","delete","bind","Body","FirstName","LastName","Birthday","Telephone","App","state","generate","newAddress","addAddressHandler","event","preventDefault","setState","deleteAddressHandler","deleteIndex","findIndex","splice","searchHandler","keyword","target","value","filter","toLowerCase","includes","render","Container","type","placeholder","id","onChange","Form","onSubmit","Group","controlId","Label","FormControl","e","Button","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43367149.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n\nfunction AddressBook (props) {\n\n    let address = [...props.address];\n    let listItems = address.map((item) => \n        <ListGroup.Item key={item.key}>\n            <Card className=\"bg-light border rounded\">\n                <span key={item.key}\n                    className=\"text-right pointer\"\n                    onClick={props.delete.bind(null,item.key)}>\n                    {'\\u274e'}\n                </span>\n                <Card.Body className=\"text-left\">\n                    <p>FirstName: {item.FirstName}</p>\n                    <p>LastName: {item.LastName}</p>\n                    <p>BirthDay: {item.Birthday}</p>\n                    <p>Telephone: {item.Telephone}</p>\n                </Card.Body>\n            </Card>\n        </ListGroup.Item>\n    )\n    return listItems;\n}\n\nexport default AddressBook;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {Container, FormControl} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport AddressBook from \"./AddressBook/AddressBook\";\nimport {generate} from 'randomstring';\n\nclass App extends React.Component {\n  state = {\n    address: [\n      {\n        key: generate(10),\n        FirstName: \"Cathy\",\n        LastName: \"Pierce\",\n        Birthday: \"9/14/1996\",\n        Telephone: \"200-910-8132\"\n      },\n      {\n        key: generate(10),\n        FirstName: \"Alfonso\",\n        LastName: \"Cooley\",\n        Birthday: \"8/10/1973\",\n        Telephone: \"200-657-9362\"\n      },\n      {\n        key: generate(10),\n        FirstName: \"Victor\",\n        LastName: \"Gordon\",\n        Birthday: \"8/3/1970\",\n        Telephone: \"200-661-9407\"\n      },\n      {\n        key: generate(10),\n        FirstName: \"Colleen\",\n        LastName: \"Wright\",\n        Birthday: \"10/28/1967\",\n        Telephone: \"200-250-7949\"\n      },\n      {\n        key: generate(10),\n        FirstName: \"James\",\n        LastName: \"Johnston\",\n        Birthday: \"5/11/1972\",\n        Telephone: \"200-645-3176\"\n      },\n      {\n        key: generate(10),\n        FirstName: \"Anna\",\n        LastName: \"Reyes\",\n        Birthday: \"9/10/1975\",\n        Telephone: \"200-707-8670\"\n      }\n    ],\n    FirstName: \"\",\n    LastName: \"\",\n    Birthday: \"\",\n    Telephone: \"\",\n    newAddress: null\n  };\n\n  addAddressHandler = (event) => {\n    event.preventDefault();\n    let newAddress = {\n      key: generate(10),\n      FirstName: this.state.FirstName,\n      LastName: this.state.LastName,\n      Birthday: this.state.Birthday,\n      Telephone: this.state.Telephone\n    };\n    this.setState({address:[...this.state.address,newAddress]});\n    this.setState({FirstName:''})\n    this.setState({LastName:''});\n    this.setState({Birthday:''});\n    this.setState({Telephone:''});\n  }\n\n  deleteAddressHandler = (key, event) => {\n    let address = [...this.state.address];\n    let deleteIndex = address.findIndex((item) => item.key === key);\n    address.splice(deleteIndex,1);\n    this.setState({address:address});\n  }\n\n  searchHandler = (event) => {\n    let keyword = event.target.value;\n    let address = this.state.address;\n    let newAddress = address.filter((item => {\n      return item.FirstName.toLowerCase().includes(keyword) || item.LastName.toLowerCase().includes(keyword) || item.Birthday.toLowerCase().includes(keyword) || item.Telephone.toLowerCase().includes(keyword)\n    }));\n    this.setState({newAddress: keyword? newAddress : null});\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Container>\n          <header className=\"text-left\">\n            <h1>React Based Address Book</h1>\n          </header>\n          <div className=\"text-right\">\n            <input type=\"text\"\n              placeholder=\"Search Keyword\"\n              id=\"searchwWord\"\n              onChange={this.searchHandler}>\n\n            </input>\n          </div>\n          <AddressBook\n            address={this.state.newAddress || this.state.address}\n            delete={this.deleteAddressHandler}>\n          </AddressBook>\n          <br />\n          <h2 className=\"text-left\">Add Address</h2>\n          <Form className=\"text-left\" onSubmit={this.addAddressHandler}>\n            <Form.Group controlId=\"formAddress\">\n              <Form.Label>FirstName</Form.Label>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter FirstName\"\n                value={this.state.FirstName}\n                onChange={(e) => this.setState({FirstName:e.target.value})}>\n              </FormControl>\n              <Form.Label>LastName</Form.Label>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter LastName\"\n                value={this.state.LastName}\n                onChange={(e) => this.setState({LastName:e.target.value})}>\n              </FormControl>\n              <Form.Label>Birthday</Form.Label>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter Birthday\"\n                value={this.state.Birthday}\n                onChange={(e) => this.setState({Birthday:e.target.value})}>\n              </FormControl>\n              <Form.Label>Telephone</Form.Label>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter Telephone\"\n                value={this.state.Telephone}\n                onChange={(e) => this.setState({Telephone:e.target.value})}>\n              </FormControl>\n              <br/>\n              <Button variant=\"primary\" type=\"submit\">Add New Address</Button>\n            </Form.Group>\n          </Form>\n        </Container>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}